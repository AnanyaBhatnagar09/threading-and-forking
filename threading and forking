#include <iostream>
#include <thread>

// This function will be called from a thread
void threadFunction(int n) {
    for (int i = 0; i < n; ++i) {
        std::cout << "Thread " << std::this_thread::get_id() << " executing.\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}

int main() {
    // Starting a thread by passing a function and its arguments
    std::thread t(threadFunction, 5);

    // Do other stuff in main thread
    for (int i = 0; i < 5; ++i) {
        std::cout << "Main thread executing.\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(400));
    }

    // Wait for thread to finish
    t.join();

    std::cout << "Thread finished execution.\n";

    return 0;
}
//forking
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>


    int pid = fork();

    if (pid == 0) {
        // Child process
        for (int i = 0; i < 5; ++i) {
            printf("Child process\n");
            sleep(1);
        }
    } else if (pid > 0) {
        // Parent process
        for (int i = 0; i < 5; ++i) {
            printf("Parent process\n");
            sleep(1);
        }
        wait(NULL); // Wait for child to finish
    } else {
        // Fork failed
        printf("fork() failed!\n");
        return 1;
    }

    return 0;

